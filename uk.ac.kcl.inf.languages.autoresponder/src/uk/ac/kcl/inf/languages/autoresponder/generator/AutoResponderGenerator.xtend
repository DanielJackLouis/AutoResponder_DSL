/*
 * generated by Xtext 2.26.0
 */
package uk.ac.kcl.inf.languages.autoresponder.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import uk.ac.kcl.inf.languages.autoresponder.autoResponder.AutoResponderProgram
import uk.ac.kcl.inf.languages.autoresponder.autoResponder.TriggerStatement
import uk.ac.kcl.inf.languages.autoresponder.autoResponder.ActivityStatement
import uk.ac.kcl.inf.languages.autoresponder.autoResponder.InstructStatement
import uk.ac.kcl.inf.languages.autoresponder.autoResponder.TerminationStatement
import uk.ac.kcl.inf.languages.autoresponder.autoResponder.Statement
import uk.ac.kcl.inf.languages.autoresponder.autoResponder.StringLiteral
import uk.ac.kcl.inf.languages.autoresponder.autoResponder.StringVarExpression
import uk.ac.kcl.inf.languages.autoresponder.autoResponder.StringExpression
import uk.ac.kcl.inf.languages.autoresponder.autoResponder.HearStatement
import uk.ac.kcl.inf.languages.autoresponder.autoResponder.ContactStatement

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class AutoResponderGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val model = resource.contents.head as AutoResponderProgram
		fsa.generateFile(deriveTargetFileNameFor(model, resource), model.generate)
		
		val className = resource.deriveClassName
		fsa.generateFile(className + '.java', model.doGenerateClass(className))
	}
		
	def deriveTargetFileNameFor(AutoResponderProgram program, Resource resource) {
		resource.URI.appendFileExtension('txt').lastSegment
	}
		
	def generate(AutoResponderProgram program) '''
		Program contains: 
		
		- «program.eAllContents.filter(TriggerStatement).size» input commands
		- «program.eAllContents.filter(ActivityStatement).size» activity commands
		- «program.eAllContents.filter(ContactStatement).size» timeout commands
		- «program.eAllContents.filter(TerminationStatement).size» back commands
		- «program.eAllContents.filter(InstructStatement).size» instruct commands
		
	'''
	
	def deriveClassName(Resource resource)	{
		val originalFilename = resource.URI.lastSegment
		
		originalFilename.substring(0, originalFilename.indexOf('.')).toFirstUpper + 'AutoResponder'
	}
	
	def doGenerateClass(AutoResponderProgram program, String className) '''
	import java.util.Scanner;
	import static java.lang.System.exit;
	import javax.swing.*;
	
	public class «className» {
	
	    public static void main(String[] args) {
	    	while (true) {
	    		«program.statements.map[generateJavaStatement(new Environment, new EnvironmentTrigger)].join('\n')»
	    		
	    		if (input0.equals("exit")) {
	    			System.out.println("Thanks for using!");
	    			exit(0);
	    		} else {
	    		    System.out.println("Illegal input! Please input again!");
	    		}
	    	}
	    }
	    
	    public static void transferManual(String phoneNumber) {
	            int userOption = JOptionPane.showConfirmDialog(null, "Do you want to call " + phoneNumber + " for support?", "Reminder", JOptionPane.OK_OPTION, JOptionPane.QUESTION_MESSAGE);
	    
	            if (userOption == JOptionPane.OK_OPTION) {
	                System.err.println("connecting");
	                for (int i = 0; i <= 5; i++){
	                    System.err.print(" . ");
	                    try {
	                        Thread.sleep(1000);
	                    } catch (InterruptedException e) {
	                        e.printStackTrace();
	                    }
	                }
	            } else {
	                System.out.println("Request Cancelled!");
	                return;
	            }
	        }
	}
	'''
	
	private static class Environment {
		var int counter = 1
		
		def getFreshVarName() '''input«counter++»'''
		
		def exit() { counter-- }
	}
	
	private static class EnvironmentTrigger {
		var int counter = 0
		
		def getFreshVarName() '''input«counter++»'''
		
		def exit() { counter-- }
	}
	
	dispatch def String generateJavaStatement(Statement stmt, Environment env, EnvironmentTrigger envtri) ''''''
	dispatch def String generateJavaStatement(TriggerStatement stmt, Environment env, EnvironmentTrigger envtri) {
		if (stmt.statement.size != 0) {
			
			var varName = envtri.freshVarName
		
			val result = '''
			if («varName».equals("«stmt.name»")) { 
				«stmt.statement.map[generateJavaStatement(env, envtri)].join('\n')»
				continue;
			}
			'''
			envtri.exit
		
			if (result !== null) {
				result
			}
		}
	}
	
	dispatch def String generateJavaStatement(InstructStatement stmt, Environment env, EnvironmentTrigger envtri) '''System.out.println("«stmt.instruction.generateJavaStringExpression»");'''
	dispatch def String generateJavaStatement(ActivityStatement stmt, Environment env, EnvironmentTrigger envtri) {
		if (stmt.statements.size != 0) {
			
			var varName = env.freshVarName
			
			val result = '''
				while (true) {
					
					«stmt.statements.map[generateJavaStatement(env, envtri)].join('\n')»
					
					if («varName».equals("Back")) {
						break;
					} else {
					    System.out.println("Illegal input! Please retry again!");
					}
				}
			'''
			
			env.exit
			
			if (result !== null) {
				result
			}
		} 
	}
	dispatch def String generateJavaStatement(HearStatement stmt, Environment env, EnvironmentTrigger envtri) '''String input«stmt.value» = new Scanner(System.in).nextLine();'''
	dispatch def String generateJavaStatement(ContactStatement stmt, Environment env, EnvironmentTrigger envtri) '''transferManual("«stmt.phoneNumber.generateJavaStringExpression»");'''
	
	dispatch def String generateJavaStringExpression(StringExpression exp) ''''''
	dispatch def String generateJavaStringExpression(StringLiteral exp) '''«exp.^val»'''
	dispatch def String generateJavaStringExpression(StringVarExpression exp) '''«exp.^var.string»'''	
		
}























