/*
 * generated by Xtext 2.26.0
 */
package uk.ac.kcl.inf.languages.autoresponder.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class AutoResponderGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class AutoResponderProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.languages.autoresponder.AutoResponder.AutoResponderProgram");
		private final Assignment cStatementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_0 = (RuleCall)cStatementsAssignment.eContents().get(0);
		
		//AutoResponderProgram:
		//    statements += Statement* // "*" here means any number statements are allowed
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//statements += Statement*
		public Assignment getStatementsAssignment() { return cStatementsAssignment; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_0() { return cStatementsStatementParserRuleCall_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.languages.autoresponder.AutoResponder.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTriggerStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cActivityStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInstructStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cHearStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTerminationStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cContactStatementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cVariableDeclarationParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cStringVariableDeclarationParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//Statement:
		//    TriggerStatement |
		//    ActivityStatement |
		//    InstructStatement |
		//    HearStatement |
		//    TerminationStatement |
		//    ContactStatement |
		//    VariableDeclaration |
		//    StringVariableDeclaration
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//TriggerStatement |
		//ActivityStatement |
		//InstructStatement |
		//HearStatement |
		//TerminationStatement |
		//ContactStatement |
		//VariableDeclaration |
		//StringVariableDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TriggerStatement
		public RuleCall getTriggerStatementParserRuleCall_0() { return cTriggerStatementParserRuleCall_0; }
		
		//ActivityStatement
		public RuleCall getActivityStatementParserRuleCall_1() { return cActivityStatementParserRuleCall_1; }
		
		//InstructStatement
		public RuleCall getInstructStatementParserRuleCall_2() { return cInstructStatementParserRuleCall_2; }
		
		//HearStatement
		public RuleCall getHearStatementParserRuleCall_3() { return cHearStatementParserRuleCall_3; }
		
		//TerminationStatement
		public RuleCall getTerminationStatementParserRuleCall_4() { return cTerminationStatementParserRuleCall_4; }
		
		//ContactStatement
		public RuleCall getContactStatementParserRuleCall_5() { return cContactStatementParserRuleCall_5; }
		
		//VariableDeclaration
		public RuleCall getVariableDeclarationParserRuleCall_6() { return cVariableDeclarationParserRuleCall_6; }
		
		//StringVariableDeclaration
		public RuleCall getStringVariableDeclarationParserRuleCall_7() { return cStringVariableDeclarationParserRuleCall_7; }
	}
	public class HearStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.languages.autoresponder.AutoResponder.HearStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWaitForInputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//HearStatement:
		//    'WaitForInput' value=INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'WaitForInput' value=INT
		public Group getGroup() { return cGroup; }
		
		//'WaitForInput'
		public Keyword getWaitForInputKeyword_0() { return cWaitForInputKeyword_0; }
		
		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }
	}
	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.languages.autoresponder.AutoResponder.VariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueINTTerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//VariableDeclaration:
		//    "var" name=ID "=" value=INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"var" name=ID "=" value=INT
		public Group getGroup() { return cGroup; }
		
		//"var"
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//value=INT
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_3_0() { return cValueINTTerminalRuleCall_3_0; }
	}
	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.languages.autoresponder.AutoResponder.StringLiteral");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValSTRINGTerminalRuleCall_0 = (RuleCall)cValAssignment.eContents().get(0);
		
		//StringLiteral:
		//    val = STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//val = STRING
		public Assignment getValAssignment() { return cValAssignment; }
		
		//STRING
		public RuleCall getValSTRINGTerminalRuleCall_0() { return cValSTRINGTerminalRuleCall_0; }
	}
	public class StringVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.languages.autoresponder.AutoResponder.StringVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStringAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStringSTRINGTerminalRuleCall_3_0 = (RuleCall)cStringAssignment_3.eContents().get(0);
		
		//StringVariableDeclaration:
		//    "var" name=ID "=" string=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"var" name=ID "=" string=STRING
		public Group getGroup() { return cGroup; }
		
		//"var"
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//string=STRING
		public Assignment getStringAssignment_3() { return cStringAssignment_3; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_3_0() { return cStringSTRINGTerminalRuleCall_3_0; }
	}
	public class StringVarExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.languages.autoresponder.AutoResponder.StringVarExpression");
		private final Assignment cVarAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cVarStringVariableDeclarationCrossReference_0 = (CrossReference)cVarAssignment.eContents().get(0);
		private final RuleCall cVarStringVariableDeclarationIDTerminalRuleCall_0_1 = (RuleCall)cVarStringVariableDeclarationCrossReference_0.eContents().get(1);
		
		//StringVarExpression:
		//    var = [StringVariableDeclaration]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//var = [StringVariableDeclaration]
		public Assignment getVarAssignment() { return cVarAssignment; }
		
		//[StringVariableDeclaration]
		public CrossReference getVarStringVariableDeclarationCrossReference_0() { return cVarStringVariableDeclarationCrossReference_0; }
		
		//ID
		public RuleCall getVarStringVariableDeclarationIDTerminalRuleCall_0_1() { return cVarStringVariableDeclarationIDTerminalRuleCall_0_1; }
	}
	public class StringExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.languages.autoresponder.AutoResponder.StringExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringVarExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//StringExpression:
		//    StringLiteral |
		//    StringVarExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//StringLiteral |
		//StringVarExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_0() { return cStringLiteralParserRuleCall_0; }
		
		//StringVarExpression
		public RuleCall getStringVarExpressionParserRuleCall_1() { return cStringVarExpressionParserRuleCall_1; }
	}
	public class TriggerStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.languages.autoresponder.AutoResponder.TriggerStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cActivityAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cActivityActivityStatementCrossReference_5_0 = (CrossReference)cActivityAssignment_5.eContents().get(0);
		private final RuleCall cActivityActivityStatementIDTerminalRuleCall_5_0_1 = (RuleCall)cActivityActivityStatementCrossReference_5_0.eContents().get(1);
		private final Assignment cStatementAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cStatementActivityStatementParserRuleCall_6_0 = (RuleCall)cStatementAssignment_6.eContents().get(0);
		
		//TriggerStatement: // Trigger the Activity
		//    'Input' '(' name = ID ')' '->' activity = [ActivityStatement]
		//        statement += ActivityStatement
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//// Trigger the Activity
		//   'Input' '(' name = ID ')' '->' activity = [ActivityStatement]
		//       statement += ActivityStatement
		public Group getGroup() { return cGroup; }
		
		//// Trigger the Activity
		//   'Input'
		public Keyword getInputKeyword_0() { return cInputKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//name = ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_4() { return cHyphenMinusGreaterThanSignKeyword_4; }
		
		//activity = [ActivityStatement]
		public Assignment getActivityAssignment_5() { return cActivityAssignment_5; }
		
		//[ActivityStatement]
		public CrossReference getActivityActivityStatementCrossReference_5_0() { return cActivityActivityStatementCrossReference_5_0; }
		
		//ID
		public RuleCall getActivityActivityStatementIDTerminalRuleCall_5_0_1() { return cActivityActivityStatementIDTerminalRuleCall_5_0_1; }
		
		//statement += ActivityStatement
		public Assignment getStatementAssignment_6() { return cStatementAssignment_6; }
		
		//ActivityStatement
		public RuleCall getStatementActivityStatementParserRuleCall_6_0() { return cStatementActivityStatementParserRuleCall_6_0; }
	}
	public class ActivityStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.languages.autoresponder.AutoResponder.ActivityStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActivityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cOnKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLast_inputAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLast_inputStringExpressionParserRuleCall_4_0 = (RuleCall)cLast_inputAssignment_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cStatementsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cStatementsStatementParserRuleCall_6_0 = (RuleCall)cStatementsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ActivityStatement:
		//    'Activity' name=ID ':' 'on' last_input = StringExpression '{'
		//        statements += Statement*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Activity' name=ID ':' 'on' last_input = StringExpression '{'
		//    statements += Statement*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Activity'
		public Keyword getActivityKeyword_0() { return cActivityKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//'on'
		public Keyword getOnKeyword_3() { return cOnKeyword_3; }
		
		//last_input = StringExpression
		public Assignment getLast_inputAssignment_4() { return cLast_inputAssignment_4; }
		
		//StringExpression
		public RuleCall getLast_inputStringExpressionParserRuleCall_4_0() { return cLast_inputStringExpressionParserRuleCall_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//statements += Statement*
		public Assignment getStatementsAssignment_6() { return cStatementsAssignment_6; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_6_0() { return cStatementsStatementParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class InstructStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.languages.autoresponder.AutoResponder.InstructStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInstructKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInstructionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInstructionStringExpressionParserRuleCall_2_0 = (RuleCall)cInstructionAssignment_2.eContents().get(0);
		
		//InstructStatement:
		//    'Instruct' '->' instruction = StringExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Instruct' '->' instruction = StringExpression
		public Group getGroup() { return cGroup; }
		
		//'Instruct'
		public Keyword getInstructKeyword_0() { return cInstructKeyword_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }
		
		//instruction = StringExpression
		public Assignment getInstructionAssignment_2() { return cInstructionAssignment_2; }
		
		//StringExpression
		public RuleCall getInstructionStringExpressionParserRuleCall_2_0() { return cInstructionStringExpressionParserRuleCall_2_0; }
	}
	public class TerminationStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.languages.autoresponder.AutoResponder.TerminationStatement");
		private final Assignment cStateAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStateActivityStateEnumRuleCall_0 = (RuleCall)cStateAssignment.eContents().get(0);
		
		//TerminationStatement:
		//    state=ActivityState
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//state=ActivityState
		public Assignment getStateAssignment() { return cStateAssignment; }
		
		//ActivityState
		public RuleCall getStateActivityStateEnumRuleCall_0() { return cStateActivityStateEnumRuleCall_0; }
	}
	public class ContactStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.languages.autoresponder.AutoResponder.ContactStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransferManualKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPhoneNumberAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPhoneNumberStringExpressionParserRuleCall_2_0 = (RuleCall)cPhoneNumberAssignment_2.eContents().get(0);
		
		//ContactStatement:
		//    'transferManual' '->' phoneNumber = StringExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'transferManual' '->' phoneNumber = StringExpression
		public Group getGroup() { return cGroup; }
		
		//'transferManual'
		public Keyword getTransferManualKeyword_0() { return cTransferManualKeyword_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }
		
		//phoneNumber = StringExpression
		public Assignment getPhoneNumberAssignment_2() { return cPhoneNumberAssignment_2; }
		
		//StringExpression
		public RuleCall getPhoneNumberStringExpressionParserRuleCall_2_0() { return cPhoneNumberStringExpressionParserRuleCall_2_0; }
	}
	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.languages.autoresponder.AutoResponder.Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAdditionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorPlusSignKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorHyphenMinusKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMultiplicationParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//// 可能还需要转接人工客服、或者留言、
		//Addition returns Expression:
		//    Multiplication ({Addition.left = current} operator+=("+"|"-") right+=Multiplication)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Multiplication ({Addition.left = current} operator+=("+"|"-") right+=Multiplication)*
		public Group getGroup() { return cGroup; }
		
		//Multiplication
		public RuleCall getMultiplicationParserRuleCall_0() { return cMultiplicationParserRuleCall_0; }
		
		//({Addition.left = current} operator+=("+"|"-") right+=Multiplication)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Addition.left = current}
		public Action getAdditionLeftAction_1_0() { return cAdditionLeftAction_1_0; }
		
		//operator+=("+"|"-")
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//("+"|"-")
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }
		
		//"+"
		public Keyword getOperatorPlusSignKeyword_1_1_0_0() { return cOperatorPlusSignKeyword_1_1_0_0; }
		
		//"-"
		public Keyword getOperatorHyphenMinusKeyword_1_1_0_1() { return cOperatorHyphenMinusKeyword_1_1_0_1; }
		
		//right+=Multiplication
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Multiplication
		public RuleCall getRightMultiplicationParserRuleCall_1_2_0() { return cRightMultiplicationParserRuleCall_1_2_0; }
	}
	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.languages.autoresponder.AutoResponder.Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMultiplicationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorAsteriskKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorSolidusKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Multiplication returns Expression:
		//    Primary ({Multiplication.left = current} operator+=("*"|"/") right+=Primary)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Primary ({Multiplication.left = current} operator+=("*"|"/") right+=Primary)*
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//({Multiplication.left = current} operator+=("*"|"/") right+=Primary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Multiplication.left = current}
		public Action getMultiplicationLeftAction_1_0() { return cMultiplicationLeftAction_1_0; }
		
		//operator+=("*"|"/")
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//("*"|"/")
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }
		
		//"*"
		public Keyword getOperatorAsteriskKeyword_1_1_0_0() { return cOperatorAsteriskKeyword_1_1_0_0; }
		
		//"/"
		public Keyword getOperatorSolidusKeyword_1_1_0_1() { return cOperatorSolidusKeyword_1_1_0_1; }
		
		//right+=Primary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_2_0() { return cRightPrimaryParserRuleCall_1_2_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.languages.autoresponder.AutoResponder.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntVarExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRealLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cAdditionParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//Primary returns Expression:
		//    IntLiteral |
		//    IntVarExpression |
		//    RealLiteral |
		//    "(" Addition ")"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//IntLiteral |
		//IntVarExpression |
		//RealLiteral |
		//"(" Addition ")"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntLiteral
		public RuleCall getIntLiteralParserRuleCall_0() { return cIntLiteralParserRuleCall_0; }
		
		//IntVarExpression
		public RuleCall getIntVarExpressionParserRuleCall_1() { return cIntVarExpressionParserRuleCall_1; }
		
		//RealLiteral
		public RuleCall getRealLiteralParserRuleCall_2() { return cRealLiteralParserRuleCall_2; }
		
		//"(" Addition ")"
		public Group getGroup_3() { return cGroup_3; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//Addition
		public RuleCall getAdditionParserRuleCall_3_1() { return cAdditionParserRuleCall_3_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}
	public class IntLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.languages.autoresponder.AutoResponder.IntLiteral");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValINTTerminalRuleCall_0 = (RuleCall)cValAssignment.eContents().get(0);
		
		//IntLiteral:
		//    val = INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//val = INT
		public Assignment getValAssignment() { return cValAssignment; }
		
		//INT
		public RuleCall getValINTTerminalRuleCall_0() { return cValINTTerminalRuleCall_0; }
	}
	public class RealLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.languages.autoresponder.AutoResponder.RealLiteral");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValREALParserRuleCall_0 = (RuleCall)cValAssignment.eContents().get(0);
		
		//RealLiteral:
		//    val = REAL
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//val = REAL
		public Assignment getValAssignment() { return cValAssignment; }
		
		//REAL
		public RuleCall getValREALParserRuleCall_0() { return cValREALParserRuleCall_0; }
	}
	public class IntVarExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.languages.autoresponder.AutoResponder.IntVarExpression");
		private final Assignment cVarAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cVarVariableDeclarationCrossReference_0 = (CrossReference)cVarAssignment.eContents().get(0);
		private final RuleCall cVarVariableDeclarationIDTerminalRuleCall_0_1 = (RuleCall)cVarVariableDeclarationCrossReference_0.eContents().get(1);
		
		//IntVarExpression:
		//    var = [VariableDeclaration]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//var = [VariableDeclaration]
		public Assignment getVarAssignment() { return cVarAssignment; }
		
		//[VariableDeclaration]
		public CrossReference getVarVariableDeclarationCrossReference_0() { return cVarVariableDeclarationCrossReference_0; }
		
		//ID
		public RuleCall getVarVariableDeclarationIDTerminalRuleCall_0_1() { return cVarVariableDeclarationIDTerminalRuleCall_0_1; }
	}
	public class REALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.languages.autoresponder.AutoResponder.REAL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//REAL returns ecore::EFloat hidden():
		//    INT? "." INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//INT? "." INT
		public Group getGroup() { return cGroup; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	
	public class ActivityStateElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.languages.autoresponder.AutoResponder.ActivityState");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBackEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBackBackKeyword_0_0 = (Keyword)cBackEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRepeatEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRepeatRepeatKeyword_1_0 = (Keyword)cRepeatEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cExitEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cExitExitKeyword_2_0 = (Keyword)cExitEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum ActivityState:
		//    back | repeat | exit
		//;
		public EnumRule getRule() { return rule; }
		
		//back | repeat | exit
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//back
		public EnumLiteralDeclaration getBackEnumLiteralDeclaration_0() { return cBackEnumLiteralDeclaration_0; }
		
		public Keyword getBackBackKeyword_0_0() { return cBackBackKeyword_0_0; }
		
		//repeat
		public EnumLiteralDeclaration getRepeatEnumLiteralDeclaration_1() { return cRepeatEnumLiteralDeclaration_1; }
		
		public Keyword getRepeatRepeatKeyword_1_0() { return cRepeatRepeatKeyword_1_0; }
		
		//exit
		public EnumLiteralDeclaration getExitEnumLiteralDeclaration_2() { return cExitEnumLiteralDeclaration_2; }
		
		public Keyword getExitExitKeyword_2_0() { return cExitExitKeyword_2_0; }
	}
	
	private final AutoResponderProgramElements pAutoResponderProgram;
	private final StatementElements pStatement;
	private final HearStatementElements pHearStatement;
	private final VariableDeclarationElements pVariableDeclaration;
	private final StringLiteralElements pStringLiteral;
	private final StringVariableDeclarationElements pStringVariableDeclaration;
	private final StringVarExpressionElements pStringVarExpression;
	private final StringExpressionElements pStringExpression;
	private final TriggerStatementElements pTriggerStatement;
	private final ActivityStatementElements pActivityStatement;
	private final InstructStatementElements pInstructStatement;
	private final TerminationStatementElements pTerminationStatement;
	private final ActivityStateElements eActivityState;
	private final ContactStatementElements pContactStatement;
	private final AdditionElements pAddition;
	private final MultiplicationElements pMultiplication;
	private final PrimaryElements pPrimary;
	private final IntLiteralElements pIntLiteral;
	private final RealLiteralElements pRealLiteral;
	private final IntVarExpressionElements pIntVarExpression;
	private final REALElements pREAL;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public AutoResponderGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pAutoResponderProgram = new AutoResponderProgramElements();
		this.pStatement = new StatementElements();
		this.pHearStatement = new HearStatementElements();
		this.pVariableDeclaration = new VariableDeclarationElements();
		this.pStringLiteral = new StringLiteralElements();
		this.pStringVariableDeclaration = new StringVariableDeclarationElements();
		this.pStringVarExpression = new StringVarExpressionElements();
		this.pStringExpression = new StringExpressionElements();
		this.pTriggerStatement = new TriggerStatementElements();
		this.pActivityStatement = new ActivityStatementElements();
		this.pInstructStatement = new InstructStatementElements();
		this.pTerminationStatement = new TerminationStatementElements();
		this.eActivityState = new ActivityStateElements();
		this.pContactStatement = new ContactStatementElements();
		this.pAddition = new AdditionElements();
		this.pMultiplication = new MultiplicationElements();
		this.pPrimary = new PrimaryElements();
		this.pIntLiteral = new IntLiteralElements();
		this.pRealLiteral = new RealLiteralElements();
		this.pIntVarExpression = new IntVarExpressionElements();
		this.pREAL = new REALElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("uk.ac.kcl.inf.languages.autoresponder.AutoResponder".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//AutoResponderProgram:
	//    statements += Statement* // "*" here means any number statements are allowed
	//;
	public AutoResponderProgramElements getAutoResponderProgramAccess() {
		return pAutoResponderProgram;
	}
	
	public ParserRule getAutoResponderProgramRule() {
		return getAutoResponderProgramAccess().getRule();
	}
	
	//Statement:
	//    TriggerStatement |
	//    ActivityStatement |
	//    InstructStatement |
	//    HearStatement |
	//    TerminationStatement |
	//    ContactStatement |
	//    VariableDeclaration |
	//    StringVariableDeclaration
	//;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//HearStatement:
	//    'WaitForInput' value=INT
	//;
	public HearStatementElements getHearStatementAccess() {
		return pHearStatement;
	}
	
	public ParserRule getHearStatementRule() {
		return getHearStatementAccess().getRule();
	}
	
	//VariableDeclaration:
	//    "var" name=ID "=" value=INT
	//;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return pVariableDeclaration;
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}
	
	//StringLiteral:
	//    val = STRING
	//;
	public StringLiteralElements getStringLiteralAccess() {
		return pStringLiteral;
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}
	
	//StringVariableDeclaration:
	//    "var" name=ID "=" string=STRING
	//;
	public StringVariableDeclarationElements getStringVariableDeclarationAccess() {
		return pStringVariableDeclaration;
	}
	
	public ParserRule getStringVariableDeclarationRule() {
		return getStringVariableDeclarationAccess().getRule();
	}
	
	//StringVarExpression:
	//    var = [StringVariableDeclaration]
	//;
	public StringVarExpressionElements getStringVarExpressionAccess() {
		return pStringVarExpression;
	}
	
	public ParserRule getStringVarExpressionRule() {
		return getStringVarExpressionAccess().getRule();
	}
	
	//StringExpression:
	//    StringLiteral |
	//    StringVarExpression
	//;
	public StringExpressionElements getStringExpressionAccess() {
		return pStringExpression;
	}
	
	public ParserRule getStringExpressionRule() {
		return getStringExpressionAccess().getRule();
	}
	
	//TriggerStatement: // Trigger the Activity
	//    'Input' '(' name = ID ')' '->' activity = [ActivityStatement]
	//        statement += ActivityStatement
	//;
	public TriggerStatementElements getTriggerStatementAccess() {
		return pTriggerStatement;
	}
	
	public ParserRule getTriggerStatementRule() {
		return getTriggerStatementAccess().getRule();
	}
	
	//ActivityStatement:
	//    'Activity' name=ID ':' 'on' last_input = StringExpression '{'
	//        statements += Statement*
	//    '}'
	//;
	public ActivityStatementElements getActivityStatementAccess() {
		return pActivityStatement;
	}
	
	public ParserRule getActivityStatementRule() {
		return getActivityStatementAccess().getRule();
	}
	
	//InstructStatement:
	//    'Instruct' '->' instruction = StringExpression
	//;
	public InstructStatementElements getInstructStatementAccess() {
		return pInstructStatement;
	}
	
	public ParserRule getInstructStatementRule() {
		return getInstructStatementAccess().getRule();
	}
	
	//TerminationStatement:
	//    state=ActivityState
	//;
	public TerminationStatementElements getTerminationStatementAccess() {
		return pTerminationStatement;
	}
	
	public ParserRule getTerminationStatementRule() {
		return getTerminationStatementAccess().getRule();
	}
	
	//enum ActivityState:
	//    back | repeat | exit
	//;
	public ActivityStateElements getActivityStateAccess() {
		return eActivityState;
	}
	
	public EnumRule getActivityStateRule() {
		return getActivityStateAccess().getRule();
	}
	
	//ContactStatement:
	//    'transferManual' '->' phoneNumber = StringExpression
	//;
	public ContactStatementElements getContactStatementAccess() {
		return pContactStatement;
	}
	
	public ParserRule getContactStatementRule() {
		return getContactStatementAccess().getRule();
	}
	
	//// 可能还需要转接人工客服、或者留言、
	//Addition returns Expression:
	//    Multiplication ({Addition.left = current} operator+=("+"|"-") right+=Multiplication)*
	//;
	public AdditionElements getAdditionAccess() {
		return pAddition;
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}
	
	//Multiplication returns Expression:
	//    Primary ({Multiplication.left = current} operator+=("*"|"/") right+=Primary)*
	//;
	public MultiplicationElements getMultiplicationAccess() {
		return pMultiplication;
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}
	
	//Primary returns Expression:
	//    IntLiteral |
	//    IntVarExpression |
	//    RealLiteral |
	//    "(" Addition ")"
	//;
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//IntLiteral:
	//    val = INT
	//;
	public IntLiteralElements getIntLiteralAccess() {
		return pIntLiteral;
	}
	
	public ParserRule getIntLiteralRule() {
		return getIntLiteralAccess().getRule();
	}
	
	//RealLiteral:
	//    val = REAL
	//;
	public RealLiteralElements getRealLiteralAccess() {
		return pRealLiteral;
	}
	
	public ParserRule getRealLiteralRule() {
		return getRealLiteralAccess().getRule();
	}
	
	//IntVarExpression:
	//    var = [VariableDeclaration]
	//;
	public IntVarExpressionElements getIntVarExpressionAccess() {
		return pIntVarExpression;
	}
	
	public ParserRule getIntVarExpressionRule() {
		return getIntVarExpressionAccess().getRule();
	}
	
	//REAL returns ecore::EFloat hidden():
	//    INT? "." INT
	//;
	public REALElements getREALAccess() {
		return pREAL;
	}
	
	public ParserRule getREALRule() {
		return getREALAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
