/*
 * generated by Xtext 2.26.0
 */
grammar InternalAutoResponder;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package uk.ac.kcl.inf.languages.autoresponder.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package uk.ac.kcl.inf.languages.autoresponder.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import uk.ac.kcl.inf.languages.autoresponder.services.AutoResponderGrammarAccess;

}

@parser::members {

 	private AutoResponderGrammarAccess grammarAccess;

    public InternalAutoResponderParser(TokenStream input, AutoResponderGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "AutoResponderProgram";
   	}

   	@Override
   	protected AutoResponderGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleAutoResponderProgram
entryRuleAutoResponderProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAutoResponderProgramRule()); }
	iv_ruleAutoResponderProgram=ruleAutoResponderProgram
	{ $current=$iv_ruleAutoResponderProgram.current; }
	EOF;

// Rule AutoResponderProgram
ruleAutoResponderProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getAutoResponderProgramAccess().getStatementsStatementParserRuleCall_0());
			}
			lv_statements_0_0=ruleStatement
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getAutoResponderProgramRule());
				}
				add(
					$current,
					"statements",
					lv_statements_0_0,
					"uk.ac.kcl.inf.languages.autoresponder.AutoResponder.Statement");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStatementAccess().getTriggerStatementParserRuleCall_0());
		}
		this_TriggerStatement_0=ruleTriggerStatement
		{
			$current = $this_TriggerStatement_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getActivityStatementParserRuleCall_1());
		}
		this_ActivityStatement_1=ruleActivityStatement
		{
			$current = $this_ActivityStatement_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getInstructStatementParserRuleCall_2());
		}
		this_InstructStatement_2=ruleInstructStatement
		{
			$current = $this_InstructStatement_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getHearStatementParserRuleCall_3());
		}
		this_HearStatement_3=ruleHearStatement
		{
			$current = $this_HearStatement_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getTerminationStatementParserRuleCall_4());
		}
		this_TerminationStatement_4=ruleTerminationStatement
		{
			$current = $this_TerminationStatement_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getContactStatementParserRuleCall_5());
		}
		this_ContactStatement_5=ruleContactStatement
		{
			$current = $this_ContactStatement_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getVariableDeclarationParserRuleCall_6());
		}
		this_VariableDeclaration_6=ruleVariableDeclaration
		{
			$current = $this_VariableDeclaration_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getStringVariableDeclarationParserRuleCall_7());
		}
		this_StringVariableDeclaration_7=ruleStringVariableDeclaration
		{
			$current = $this_StringVariableDeclaration_7.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleHearStatement
entryRuleHearStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHearStatementRule()); }
	iv_ruleHearStatement=ruleHearStatement
	{ $current=$iv_ruleHearStatement.current; }
	EOF;

// Rule HearStatement
ruleHearStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='WaitForInput'
		{
			newLeafNode(otherlv_0, grammarAccess.getHearStatementAccess().getWaitForInputKeyword_0());
		}
		(
			(
				lv_value_1_0=RULE_INT
				{
					newLeafNode(lv_value_1_0, grammarAccess.getHearStatementAccess().getValueINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getHearStatementRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableDeclarationRule()); }
	iv_ruleVariableDeclaration=ruleVariableDeclaration
	{ $current=$iv_ruleVariableDeclaration.current; }
	EOF;

// Rule VariableDeclaration
ruleVariableDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='var'
		{
			newLeafNode(otherlv_0, grammarAccess.getVariableDeclarationAccess().getVarKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='='
		{
			newLeafNode(otherlv_2, grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_2());
		}
		(
			(
				lv_value_3_0=RULE_INT
				{
					newLeafNode(lv_value_3_0, grammarAccess.getVariableDeclarationAccess().getValueINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleStringLiteral
entryRuleStringLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringLiteralRule()); }
	iv_ruleStringLiteral=ruleStringLiteral
	{ $current=$iv_ruleStringLiteral.current; }
	EOF;

// Rule StringLiteral
ruleStringLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_val_0_0=RULE_STRING
			{
				newLeafNode(lv_val_0_0, grammarAccess.getStringLiteralAccess().getValSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getStringLiteralRule());
				}
				setWithLastConsumed(
					$current,
					"val",
					lv_val_0_0,
					"org.eclipse.xtext.common.Terminals.STRING");
			}
		)
	)
;

// Entry rule entryRuleStringVariableDeclaration
entryRuleStringVariableDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringVariableDeclarationRule()); }
	iv_ruleStringVariableDeclaration=ruleStringVariableDeclaration
	{ $current=$iv_ruleStringVariableDeclaration.current; }
	EOF;

// Rule StringVariableDeclaration
ruleStringVariableDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='var'
		{
			newLeafNode(otherlv_0, grammarAccess.getStringVariableDeclarationAccess().getVarKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getStringVariableDeclarationAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStringVariableDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='='
		{
			newLeafNode(otherlv_2, grammarAccess.getStringVariableDeclarationAccess().getEqualsSignKeyword_2());
		}
		(
			(
				lv_string_3_0=RULE_STRING
				{
					newLeafNode(lv_string_3_0, grammarAccess.getStringVariableDeclarationAccess().getStringSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStringVariableDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"string",
						lv_string_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleStringVarExpression
entryRuleStringVarExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringVarExpressionRule()); }
	iv_ruleStringVarExpression=ruleStringVarExpression
	{ $current=$iv_ruleStringVarExpression.current; }
	EOF;

// Rule StringVarExpression
ruleStringVarExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getStringVarExpressionRule());
				}
			}
			otherlv_0=RULE_ID
			{
				newLeafNode(otherlv_0, grammarAccess.getStringVarExpressionAccess().getVarStringVariableDeclarationCrossReference_0());
			}
		)
	)
;

// Entry rule entryRuleStringExpression
entryRuleStringExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringExpressionRule()); }
	iv_ruleStringExpression=ruleStringExpression
	{ $current=$iv_ruleStringExpression.current; }
	EOF;

// Rule StringExpression
ruleStringExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStringExpressionAccess().getStringLiteralParserRuleCall_0());
		}
		this_StringLiteral_0=ruleStringLiteral
		{
			$current = $this_StringLiteral_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStringExpressionAccess().getStringVarExpressionParserRuleCall_1());
		}
		this_StringVarExpression_1=ruleStringVarExpression
		{
			$current = $this_StringVarExpression_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTriggerStatement
entryRuleTriggerStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTriggerStatementRule()); }
	iv_ruleTriggerStatement=ruleTriggerStatement
	{ $current=$iv_ruleTriggerStatement.current; }
	EOF;

// Rule TriggerStatement
ruleTriggerStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Input'
		{
			newLeafNode(otherlv_0, grammarAccess.getTriggerStatementAccess().getInputKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getTriggerStatementAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getTriggerStatementAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTriggerStatementRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getTriggerStatementAccess().getRightParenthesisKeyword_3());
		}
		otherlv_4='->'
		{
			newLeafNode(otherlv_4, grammarAccess.getTriggerStatementAccess().getHyphenMinusGreaterThanSignKeyword_4());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTriggerStatementRule());
					}
				}
				otherlv_5=RULE_ID
				{
					newLeafNode(otherlv_5, grammarAccess.getTriggerStatementAccess().getActivityActivityStatementCrossReference_5_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTriggerStatementAccess().getStatementActivityStatementParserRuleCall_6_0());
				}
				lv_statement_6_0=ruleActivityStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTriggerStatementRule());
					}
					add(
						$current,
						"statement",
						lv_statement_6_0,
						"uk.ac.kcl.inf.languages.autoresponder.AutoResponder.ActivityStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleActivityStatement
entryRuleActivityStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActivityStatementRule()); }
	iv_ruleActivityStatement=ruleActivityStatement
	{ $current=$iv_ruleActivityStatement.current; }
	EOF;

// Rule ActivityStatement
ruleActivityStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Activity'
		{
			newLeafNode(otherlv_0, grammarAccess.getActivityStatementAccess().getActivityKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getActivityStatementAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getActivityStatementRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getActivityStatementAccess().getColonKeyword_2());
		}
		otherlv_3='on'
		{
			newLeafNode(otherlv_3, grammarAccess.getActivityStatementAccess().getOnKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getActivityStatementAccess().getLast_inputStringExpressionParserRuleCall_4_0());
				}
				lv_last_input_4_0=ruleStringExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActivityStatementRule());
					}
					set(
						$current,
						"last_input",
						lv_last_input_4_0,
						"uk.ac.kcl.inf.languages.autoresponder.AutoResponder.StringExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5='{'
		{
			newLeafNode(otherlv_5, grammarAccess.getActivityStatementAccess().getLeftCurlyBracketKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getActivityStatementAccess().getStatementsStatementParserRuleCall_6_0());
				}
				lv_statements_6_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActivityStatementRule());
					}
					add(
						$current,
						"statements",
						lv_statements_6_0,
						"uk.ac.kcl.inf.languages.autoresponder.AutoResponder.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getActivityStatementAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRuleInstructStatement
entryRuleInstructStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInstructStatementRule()); }
	iv_ruleInstructStatement=ruleInstructStatement
	{ $current=$iv_ruleInstructStatement.current; }
	EOF;

// Rule InstructStatement
ruleInstructStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Instruct'
		{
			newLeafNode(otherlv_0, grammarAccess.getInstructStatementAccess().getInstructKeyword_0());
		}
		otherlv_1='->'
		{
			newLeafNode(otherlv_1, grammarAccess.getInstructStatementAccess().getHyphenMinusGreaterThanSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInstructStatementAccess().getInstructionStringExpressionParserRuleCall_2_0());
				}
				lv_instruction_2_0=ruleStringExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInstructStatementRule());
					}
					set(
						$current,
						"instruction",
						lv_instruction_2_0,
						"uk.ac.kcl.inf.languages.autoresponder.AutoResponder.StringExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleTerminationStatement
entryRuleTerminationStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTerminationStatementRule()); }
	iv_ruleTerminationStatement=ruleTerminationStatement
	{ $current=$iv_ruleTerminationStatement.current; }
	EOF;

// Rule TerminationStatement
ruleTerminationStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getTerminationStatementAccess().getStateActivityStateEnumRuleCall_0());
			}
			lv_state_0_0=ruleActivityState
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getTerminationStatementRule());
				}
				set(
					$current,
					"state",
					lv_state_0_0,
					"uk.ac.kcl.inf.languages.autoresponder.AutoResponder.ActivityState");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleContactStatement
entryRuleContactStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getContactStatementRule()); }
	iv_ruleContactStatement=ruleContactStatement
	{ $current=$iv_ruleContactStatement.current; }
	EOF;

// Rule ContactStatement
ruleContactStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='transferManual'
		{
			newLeafNode(otherlv_0, grammarAccess.getContactStatementAccess().getTransferManualKeyword_0());
		}
		otherlv_1='->'
		{
			newLeafNode(otherlv_1, grammarAccess.getContactStatementAccess().getHyphenMinusGreaterThanSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getContactStatementAccess().getPhoneNumberStringExpressionParserRuleCall_2_0());
				}
				lv_phoneNumber_2_0=ruleStringExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getContactStatementRule());
					}
					set(
						$current,
						"phoneNumber",
						lv_phoneNumber_2_0,
						"uk.ac.kcl.inf.languages.autoresponder.AutoResponder.StringExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAddition
entryRuleAddition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAdditionRule()); }
	iv_ruleAddition=ruleAddition
	{ $current=$iv_ruleAddition.current; }
	EOF;

// Rule Addition
ruleAddition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0());
		}
		this_Multiplication_0=ruleMultiplication
		{
			$current = $this_Multiplication_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAdditionAccess().getAdditionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_operator_2_1='+'
						{
							newLeafNode(lv_operator_2_1, grammarAccess.getAdditionAccess().getOperatorPlusSignKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAdditionRule());
							}
							addWithLastConsumed($current, "operator", lv_operator_2_1, null);
						}
						    |
						lv_operator_2_2='-'
						{
							newLeafNode(lv_operator_2_2, grammarAccess.getAdditionAccess().getOperatorHyphenMinusKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAdditionRule());
							}
							addWithLastConsumed($current, "operator", lv_operator_2_2, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleMultiplication
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAdditionRule());
						}
						add(
							$current,
							"right",
							lv_right_3_0,
							"uk.ac.kcl.inf.languages.autoresponder.AutoResponder.Multiplication");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleMultiplication
entryRuleMultiplication returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiplicationRule()); }
	iv_ruleMultiplication=ruleMultiplication
	{ $current=$iv_ruleMultiplication.current; }
	EOF;

// Rule Multiplication
ruleMultiplication returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMultiplicationAccess().getPrimaryParserRuleCall_0());
		}
		this_Primary_0=rulePrimary
		{
			$current = $this_Primary_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getMultiplicationAccess().getMultiplicationLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_operator_2_1='*'
						{
							newLeafNode(lv_operator_2_1, grammarAccess.getMultiplicationAccess().getOperatorAsteriskKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMultiplicationRule());
							}
							addWithLastConsumed($current, "operator", lv_operator_2_1, null);
						}
						    |
						lv_operator_2_2='/'
						{
							newLeafNode(lv_operator_2_2, grammarAccess.getMultiplicationAccess().getOperatorSolidusKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMultiplicationRule());
							}
							addWithLastConsumed($current, "operator", lv_operator_2_2, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMultiplicationAccess().getRightPrimaryParserRuleCall_1_2_0());
					}
					lv_right_3_0=rulePrimary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMultiplicationRule());
						}
						add(
							$current,
							"right",
							lv_right_3_0,
							"uk.ac.kcl.inf.languages.autoresponder.AutoResponder.Primary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePrimary
entryRulePrimary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	iv_rulePrimary=rulePrimary
	{ $current=$iv_rulePrimary.current; }
	EOF;

// Rule Primary
rulePrimary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getIntLiteralParserRuleCall_0());
		}
		this_IntLiteral_0=ruleIntLiteral
		{
			$current = $this_IntLiteral_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getIntVarExpressionParserRuleCall_1());
		}
		this_IntVarExpression_1=ruleIntVarExpression
		{
			$current = $this_IntVarExpression_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getRealLiteralParserRuleCall_2());
		}
		this_RealLiteral_2=ruleRealLiteral
		{
			$current = $this_RealLiteral_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			otherlv_3='('
			{
				newLeafNode(otherlv_3, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_3_0());
			}
			{
				newCompositeNode(grammarAccess.getPrimaryAccess().getAdditionParserRuleCall_3_1());
			}
			this_Addition_4=ruleAddition
			{
				$current = $this_Addition_4.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_5=')'
			{
				newLeafNode(otherlv_5, grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_3_2());
			}
		)
	)
;

// Entry rule entryRuleIntLiteral
entryRuleIntLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntLiteralRule()); }
	iv_ruleIntLiteral=ruleIntLiteral
	{ $current=$iv_ruleIntLiteral.current; }
	EOF;

// Rule IntLiteral
ruleIntLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_val_0_0=RULE_INT
			{
				newLeafNode(lv_val_0_0, grammarAccess.getIntLiteralAccess().getValINTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getIntLiteralRule());
				}
				setWithLastConsumed(
					$current,
					"val",
					lv_val_0_0,
					"org.eclipse.xtext.common.Terminals.INT");
			}
		)
	)
;

// Entry rule entryRuleRealLiteral
entryRuleRealLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRealLiteralRule()); }
	iv_ruleRealLiteral=ruleRealLiteral
	{ $current=$iv_ruleRealLiteral.current; }
	EOF;

// Rule RealLiteral
ruleRealLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getRealLiteralAccess().getValREALParserRuleCall_0());
			}
			lv_val_0_0=ruleREAL
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getRealLiteralRule());
				}
				set(
					$current,
					"val",
					lv_val_0_0,
					"uk.ac.kcl.inf.languages.autoresponder.AutoResponder.REAL");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleIntVarExpression
entryRuleIntVarExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntVarExpressionRule()); }
	iv_ruleIntVarExpression=ruleIntVarExpression
	{ $current=$iv_ruleIntVarExpression.current; }
	EOF;

// Rule IntVarExpression
ruleIntVarExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getIntVarExpressionRule());
				}
			}
			otherlv_0=RULE_ID
			{
				newLeafNode(otherlv_0, grammarAccess.getIntVarExpressionAccess().getVarVariableDeclarationCrossReference_0());
			}
		)
	)
;

// Entry rule entryRuleREAL
entryRuleREAL returns [String current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}:
	{ newCompositeNode(grammarAccess.getREALRule()); }
	iv_ruleREAL=ruleREAL
	{ $current=$iv_ruleREAL.current.getText(); }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule REAL
ruleREAL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
@after {
	leaveRule();
}:
	(
		(
			this_INT_0=RULE_INT
			{
				$current.merge(this_INT_0);
			}
			{
				newLeafNode(this_INT_0, grammarAccess.getREALAccess().getINTTerminalRuleCall_0());
			}
		)?
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getREALAccess().getFullStopKeyword_1());
		}
		this_INT_2=RULE_INT
		{
			$current.merge(this_INT_2);
		}
		{
			newLeafNode(this_INT_2, grammarAccess.getREALAccess().getINTTerminalRuleCall_2());
		}
	)
;
finally {
	myHiddenTokenState.restore();
}

// Rule ActivityState
ruleActivityState returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='back'
			{
				$current = grammarAccess.getActivityStateAccess().getBackEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getActivityStateAccess().getBackEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='repeat'
			{
				$current = grammarAccess.getActivityStateAccess().getRepeatEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getActivityStateAccess().getRepeatEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='exit'
			{
				$current = grammarAccess.getActivityStateAccess().getExitEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getActivityStateAccess().getExitEnumLiteralDeclaration_2());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
