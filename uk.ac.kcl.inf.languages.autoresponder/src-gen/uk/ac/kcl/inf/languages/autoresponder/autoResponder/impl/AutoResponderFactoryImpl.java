/**
 * generated by Xtext 2.26.0
 */
package uk.ac.kcl.inf.languages.autoresponder.autoResponder.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import uk.ac.kcl.inf.languages.autoresponder.autoResponder.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class AutoResponderFactoryImpl extends EFactoryImpl implements AutoResponderFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static AutoResponderFactory init()
  {
    try
    {
      AutoResponderFactory theAutoResponderFactory = (AutoResponderFactory)EPackage.Registry.INSTANCE.getEFactory(AutoResponderPackage.eNS_URI);
      if (theAutoResponderFactory != null)
      {
        return theAutoResponderFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new AutoResponderFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AutoResponderFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case AutoResponderPackage.AUTO_RESPONDER_PROGRAM: return createAutoResponderProgram();
      case AutoResponderPackage.STATEMENT: return createStatement();
      case AutoResponderPackage.HEAR_STATEMENT: return createHearStatement();
      case AutoResponderPackage.VARIABLE_DECLARATION: return createVariableDeclaration();
      case AutoResponderPackage.STRING_LITERAL: return createStringLiteral();
      case AutoResponderPackage.STRING_VARIABLE_DECLARATION: return createStringVariableDeclaration();
      case AutoResponderPackage.STRING_VAR_EXPRESSION: return createStringVarExpression();
      case AutoResponderPackage.STRING_EXPRESSION: return createStringExpression();
      case AutoResponderPackage.TRIGGER_STATEMENT: return createTriggerStatement();
      case AutoResponderPackage.ACTIVITY_STATEMENT: return createActivityStatement();
      case AutoResponderPackage.INSTRUCT_STATEMENT: return createInstructStatement();
      case AutoResponderPackage.TERMINATION_STATEMENT: return createTerminationStatement();
      case AutoResponderPackage.CONTACT_STATEMENT: return createContactStatement();
      case AutoResponderPackage.EXPRESSION: return createExpression();
      case AutoResponderPackage.INT_LITERAL: return createIntLiteral();
      case AutoResponderPackage.REAL_LITERAL: return createRealLiteral();
      case AutoResponderPackage.INT_VAR_EXPRESSION: return createIntVarExpression();
      case AutoResponderPackage.ADDITION: return createAddition();
      case AutoResponderPackage.MULTIPLICATION: return createMultiplication();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case AutoResponderPackage.ACTIVITY_STATE:
        return createActivityStateFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case AutoResponderPackage.ACTIVITY_STATE:
        return convertActivityStateToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AutoResponderProgram createAutoResponderProgram()
  {
    AutoResponderProgramImpl autoResponderProgram = new AutoResponderProgramImpl();
    return autoResponderProgram;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Statement createStatement()
  {
    StatementImpl statement = new StatementImpl();
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public HearStatement createHearStatement()
  {
    HearStatementImpl hearStatement = new HearStatementImpl();
    return hearStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableDeclaration createVariableDeclaration()
  {
    VariableDeclarationImpl variableDeclaration = new VariableDeclarationImpl();
    return variableDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StringLiteral createStringLiteral()
  {
    StringLiteralImpl stringLiteral = new StringLiteralImpl();
    return stringLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StringVariableDeclaration createStringVariableDeclaration()
  {
    StringVariableDeclarationImpl stringVariableDeclaration = new StringVariableDeclarationImpl();
    return stringVariableDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StringVarExpression createStringVarExpression()
  {
    StringVarExpressionImpl stringVarExpression = new StringVarExpressionImpl();
    return stringVarExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StringExpression createStringExpression()
  {
    StringExpressionImpl stringExpression = new StringExpressionImpl();
    return stringExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TriggerStatement createTriggerStatement()
  {
    TriggerStatementImpl triggerStatement = new TriggerStatementImpl();
    return triggerStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ActivityStatement createActivityStatement()
  {
    ActivityStatementImpl activityStatement = new ActivityStatementImpl();
    return activityStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InstructStatement createInstructStatement()
  {
    InstructStatementImpl instructStatement = new InstructStatementImpl();
    return instructStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TerminationStatement createTerminationStatement()
  {
    TerminationStatementImpl terminationStatement = new TerminationStatementImpl();
    return terminationStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ContactStatement createContactStatement()
  {
    ContactStatementImpl contactStatement = new ContactStatementImpl();
    return contactStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IntLiteral createIntLiteral()
  {
    IntLiteralImpl intLiteral = new IntLiteralImpl();
    return intLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RealLiteral createRealLiteral()
  {
    RealLiteralImpl realLiteral = new RealLiteralImpl();
    return realLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IntVarExpression createIntVarExpression()
  {
    IntVarExpressionImpl intVarExpression = new IntVarExpressionImpl();
    return intVarExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Addition createAddition()
  {
    AdditionImpl addition = new AdditionImpl();
    return addition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Multiplication createMultiplication()
  {
    MultiplicationImpl multiplication = new MultiplicationImpl();
    return multiplication;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ActivityState createActivityStateFromString(EDataType eDataType, String initialValue)
  {
    ActivityState result = ActivityState.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertActivityStateToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AutoResponderPackage getAutoResponderPackage()
  {
    return (AutoResponderPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static AutoResponderPackage getPackage()
  {
    return AutoResponderPackage.eINSTANCE;
  }

} //AutoResponderFactoryImpl
