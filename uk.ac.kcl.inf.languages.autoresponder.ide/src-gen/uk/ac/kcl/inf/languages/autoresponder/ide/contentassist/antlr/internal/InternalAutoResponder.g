/*
 * generated by Xtext 2.26.0
 */
grammar InternalAutoResponder;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package uk.ac.kcl.inf.languages.autoresponder.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package uk.ac.kcl.inf.languages.autoresponder.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import uk.ac.kcl.inf.languages.autoresponder.services.AutoResponderGrammarAccess;

}
@parser::members {
	private AutoResponderGrammarAccess grammarAccess;

	public void setGrammarAccess(AutoResponderGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleAutoResponderProgram
entryRuleAutoResponderProgram
:
{ before(grammarAccess.getAutoResponderProgramRule()); }
	 ruleAutoResponderProgram
{ after(grammarAccess.getAutoResponderProgramRule()); } 
	 EOF 
;

// Rule AutoResponderProgram
ruleAutoResponderProgram 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAutoResponderProgramAccess().getStatementsAssignment()); }
		(rule__AutoResponderProgram__StatementsAssignment)*
		{ after(grammarAccess.getAutoResponderProgramAccess().getStatementsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatement
entryRuleStatement
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementAccess().getAlternatives()); }
		(rule__Statement__Alternatives)
		{ after(grammarAccess.getStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleHearStatement
entryRuleHearStatement
:
{ before(grammarAccess.getHearStatementRule()); }
	 ruleHearStatement
{ after(grammarAccess.getHearStatementRule()); } 
	 EOF 
;

// Rule HearStatement
ruleHearStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getHearStatementAccess().getGroup()); }
		(rule__HearStatement__Group__0)
		{ after(grammarAccess.getHearStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration
:
{ before(grammarAccess.getVariableDeclarationRule()); }
	 ruleVariableDeclaration
{ after(grammarAccess.getVariableDeclarationRule()); } 
	 EOF 
;

// Rule VariableDeclaration
ruleVariableDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableDeclarationAccess().getGroup()); }
		(rule__VariableDeclaration__Group__0)
		{ after(grammarAccess.getVariableDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStringLiteral
entryRuleStringLiteral
:
{ before(grammarAccess.getStringLiteralRule()); }
	 ruleStringLiteral
{ after(grammarAccess.getStringLiteralRule()); } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStringLiteralAccess().getValAssignment()); }
		(rule__StringLiteral__ValAssignment)
		{ after(grammarAccess.getStringLiteralAccess().getValAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStringVariableDeclaration
entryRuleStringVariableDeclaration
:
{ before(grammarAccess.getStringVariableDeclarationRule()); }
	 ruleStringVariableDeclaration
{ after(grammarAccess.getStringVariableDeclarationRule()); } 
	 EOF 
;

// Rule StringVariableDeclaration
ruleStringVariableDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStringVariableDeclarationAccess().getGroup()); }
		(rule__StringVariableDeclaration__Group__0)
		{ after(grammarAccess.getStringVariableDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStringVarExpression
entryRuleStringVarExpression
:
{ before(grammarAccess.getStringVarExpressionRule()); }
	 ruleStringVarExpression
{ after(grammarAccess.getStringVarExpressionRule()); } 
	 EOF 
;

// Rule StringVarExpression
ruleStringVarExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStringVarExpressionAccess().getVarAssignment()); }
		(rule__StringVarExpression__VarAssignment)
		{ after(grammarAccess.getStringVarExpressionAccess().getVarAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStringExpression
entryRuleStringExpression
:
{ before(grammarAccess.getStringExpressionRule()); }
	 ruleStringExpression
{ after(grammarAccess.getStringExpressionRule()); } 
	 EOF 
;

// Rule StringExpression
ruleStringExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStringExpressionAccess().getAlternatives()); }
		(rule__StringExpression__Alternatives)
		{ after(grammarAccess.getStringExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTriggerStatement
entryRuleTriggerStatement
:
{ before(grammarAccess.getTriggerStatementRule()); }
	 ruleTriggerStatement
{ after(grammarAccess.getTriggerStatementRule()); } 
	 EOF 
;

// Rule TriggerStatement
ruleTriggerStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTriggerStatementAccess().getGroup()); }
		(rule__TriggerStatement__Group__0)
		{ after(grammarAccess.getTriggerStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleActivityStatement
entryRuleActivityStatement
:
{ before(grammarAccess.getActivityStatementRule()); }
	 ruleActivityStatement
{ after(grammarAccess.getActivityStatementRule()); } 
	 EOF 
;

// Rule ActivityStatement
ruleActivityStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getActivityStatementAccess().getGroup()); }
		(rule__ActivityStatement__Group__0)
		{ after(grammarAccess.getActivityStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInstructStatement
entryRuleInstructStatement
:
{ before(grammarAccess.getInstructStatementRule()); }
	 ruleInstructStatement
{ after(grammarAccess.getInstructStatementRule()); } 
	 EOF 
;

// Rule InstructStatement
ruleInstructStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInstructStatementAccess().getGroup()); }
		(rule__InstructStatement__Group__0)
		{ after(grammarAccess.getInstructStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTerminationStatement
entryRuleTerminationStatement
:
{ before(grammarAccess.getTerminationStatementRule()); }
	 ruleTerminationStatement
{ after(grammarAccess.getTerminationStatementRule()); } 
	 EOF 
;

// Rule TerminationStatement
ruleTerminationStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTerminationStatementAccess().getStateAssignment()); }
		(rule__TerminationStatement__StateAssignment)
		{ after(grammarAccess.getTerminationStatementAccess().getStateAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleContactStatement
entryRuleContactStatement
:
{ before(grammarAccess.getContactStatementRule()); }
	 ruleContactStatement
{ after(grammarAccess.getContactStatementRule()); } 
	 EOF 
;

// Rule ContactStatement
ruleContactStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getContactStatementAccess().getGroup()); }
		(rule__ContactStatement__Group__0)
		{ after(grammarAccess.getContactStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAddition
entryRuleAddition
:
{ before(grammarAccess.getAdditionRule()); }
	 ruleAddition
{ after(grammarAccess.getAdditionRule()); } 
	 EOF 
;

// Rule Addition
ruleAddition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAdditionAccess().getGroup()); }
		(rule__Addition__Group__0)
		{ after(grammarAccess.getAdditionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMultiplication
entryRuleMultiplication
:
{ before(grammarAccess.getMultiplicationRule()); }
	 ruleMultiplication
{ after(grammarAccess.getMultiplicationRule()); } 
	 EOF 
;

// Rule Multiplication
ruleMultiplication 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMultiplicationAccess().getGroup()); }
		(rule__Multiplication__Group__0)
		{ after(grammarAccess.getMultiplicationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimary
entryRulePrimary
:
{ before(grammarAccess.getPrimaryRule()); }
	 rulePrimary
{ after(grammarAccess.getPrimaryRule()); } 
	 EOF 
;

// Rule Primary
rulePrimary 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryAccess().getAlternatives()); }
		(rule__Primary__Alternatives)
		{ after(grammarAccess.getPrimaryAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIntLiteral
entryRuleIntLiteral
:
{ before(grammarAccess.getIntLiteralRule()); }
	 ruleIntLiteral
{ after(grammarAccess.getIntLiteralRule()); } 
	 EOF 
;

// Rule IntLiteral
ruleIntLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntLiteralAccess().getValAssignment()); }
		(rule__IntLiteral__ValAssignment)
		{ after(grammarAccess.getIntLiteralAccess().getValAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRealLiteral
entryRuleRealLiteral
:
{ before(grammarAccess.getRealLiteralRule()); }
	 ruleRealLiteral
{ after(grammarAccess.getRealLiteralRule()); } 
	 EOF 
;

// Rule RealLiteral
ruleRealLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRealLiteralAccess().getValAssignment()); }
		(rule__RealLiteral__ValAssignment)
		{ after(grammarAccess.getRealLiteralAccess().getValAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIntVarExpression
entryRuleIntVarExpression
:
{ before(grammarAccess.getIntVarExpressionRule()); }
	 ruleIntVarExpression
{ after(grammarAccess.getIntVarExpressionRule()); } 
	 EOF 
;

// Rule IntVarExpression
ruleIntVarExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntVarExpressionAccess().getVarAssignment()); }
		(rule__IntVarExpression__VarAssignment)
		{ after(grammarAccess.getIntVarExpressionAccess().getVarAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleREAL
entryRuleREAL
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
:
{ before(grammarAccess.getREALRule()); }
	 ruleREAL
{ after(grammarAccess.getREALRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule REAL
ruleREAL 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getREALAccess().getGroup()); }
		(rule__REAL__Group__0)
		{ after(grammarAccess.getREALAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Rule ActivityState
ruleActivityState
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActivityStateAccess().getAlternatives()); }
		(rule__ActivityState__Alternatives)
		{ after(grammarAccess.getActivityStateAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getTriggerStatementParserRuleCall_0()); }
		ruleTriggerStatement
		{ after(grammarAccess.getStatementAccess().getTriggerStatementParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getActivityStatementParserRuleCall_1()); }
		ruleActivityStatement
		{ after(grammarAccess.getStatementAccess().getActivityStatementParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getInstructStatementParserRuleCall_2()); }
		ruleInstructStatement
		{ after(grammarAccess.getStatementAccess().getInstructStatementParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getHearStatementParserRuleCall_3()); }
		ruleHearStatement
		{ after(grammarAccess.getStatementAccess().getHearStatementParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getTerminationStatementParserRuleCall_4()); }
		ruleTerminationStatement
		{ after(grammarAccess.getStatementAccess().getTerminationStatementParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getContactStatementParserRuleCall_5()); }
		ruleContactStatement
		{ after(grammarAccess.getStatementAccess().getContactStatementParserRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getVariableDeclarationParserRuleCall_6()); }
		ruleVariableDeclaration
		{ after(grammarAccess.getStatementAccess().getVariableDeclarationParserRuleCall_6()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getStringVariableDeclarationParserRuleCall_7()); }
		ruleStringVariableDeclaration
		{ after(grammarAccess.getStatementAccess().getStringVariableDeclarationParserRuleCall_7()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringExpressionAccess().getStringLiteralParserRuleCall_0()); }
		ruleStringLiteral
		{ after(grammarAccess.getStringExpressionAccess().getStringLiteralParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getStringExpressionAccess().getStringVarExpressionParserRuleCall_1()); }
		ruleStringVarExpression
		{ after(grammarAccess.getStringExpressionAccess().getStringVarExpressionParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__OperatorAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditionAccess().getOperatorPlusSignKeyword_1_1_0_0()); }
		'+'
		{ after(grammarAccess.getAdditionAccess().getOperatorPlusSignKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getAdditionAccess().getOperatorHyphenMinusKeyword_1_1_0_1()); }
		'-'
		{ after(grammarAccess.getAdditionAccess().getOperatorHyphenMinusKeyword_1_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__OperatorAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicationAccess().getOperatorAsteriskKeyword_1_1_0_0()); }
		'*'
		{ after(grammarAccess.getMultiplicationAccess().getOperatorAsteriskKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getMultiplicationAccess().getOperatorSolidusKeyword_1_1_0_1()); }
		'/'
		{ after(grammarAccess.getMultiplicationAccess().getOperatorSolidusKeyword_1_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryAccess().getIntLiteralParserRuleCall_0()); }
		ruleIntLiteral
		{ after(grammarAccess.getPrimaryAccess().getIntLiteralParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getIntVarExpressionParserRuleCall_1()); }
		ruleIntVarExpression
		{ after(grammarAccess.getPrimaryAccess().getIntVarExpressionParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getRealLiteralParserRuleCall_2()); }
		ruleRealLiteral
		{ after(grammarAccess.getPrimaryAccess().getRealLiteralParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getGroup_3()); }
		(rule__Primary__Group_3__0)
		{ after(grammarAccess.getPrimaryAccess().getGroup_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActivityState__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActivityStateAccess().getBackEnumLiteralDeclaration_0()); }
		('back')
		{ after(grammarAccess.getActivityStateAccess().getBackEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getActivityStateAccess().getRepeatEnumLiteralDeclaration_1()); }
		('repeat')
		{ after(grammarAccess.getActivityStateAccess().getRepeatEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getActivityStateAccess().getExitEnumLiteralDeclaration_2()); }
		('exit')
		{ after(grammarAccess.getActivityStateAccess().getExitEnumLiteralDeclaration_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__HearStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__HearStatement__Group__0__Impl
	rule__HearStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__HearStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHearStatementAccess().getWaitForInputKeyword_0()); }
	'WaitForInput'
	{ after(grammarAccess.getHearStatementAccess().getWaitForInputKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__HearStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__HearStatement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__HearStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHearStatementAccess().getValueAssignment_1()); }
	(rule__HearStatement__ValueAssignment_1)
	{ after(grammarAccess.getHearStatementAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclaration__Group__0__Impl
	rule__VariableDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationAccess().getVarKeyword_0()); }
	'var'
	{ after(grammarAccess.getVariableDeclarationAccess().getVarKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclaration__Group__1__Impl
	rule__VariableDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationAccess().getNameAssignment_1()); }
	(rule__VariableDeclaration__NameAssignment_1)
	{ after(grammarAccess.getVariableDeclarationAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclaration__Group__2__Impl
	rule__VariableDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_2()); }
	'='
	{ after(grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclaration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationAccess().getValueAssignment_3()); }
	(rule__VariableDeclaration__ValueAssignment_3)
	{ after(grammarAccess.getVariableDeclarationAccess().getValueAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StringVariableDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringVariableDeclaration__Group__0__Impl
	rule__StringVariableDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringVariableDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringVariableDeclarationAccess().getVarKeyword_0()); }
	'var'
	{ after(grammarAccess.getStringVariableDeclarationAccess().getVarKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringVariableDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringVariableDeclaration__Group__1__Impl
	rule__StringVariableDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StringVariableDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringVariableDeclarationAccess().getNameAssignment_1()); }
	(rule__StringVariableDeclaration__NameAssignment_1)
	{ after(grammarAccess.getStringVariableDeclarationAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringVariableDeclaration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringVariableDeclaration__Group__2__Impl
	rule__StringVariableDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__StringVariableDeclaration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringVariableDeclarationAccess().getEqualsSignKeyword_2()); }
	'='
	{ after(grammarAccess.getStringVariableDeclarationAccess().getEqualsSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringVariableDeclaration__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringVariableDeclaration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringVariableDeclaration__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringVariableDeclarationAccess().getStringAssignment_3()); }
	(rule__StringVariableDeclaration__StringAssignment_3)
	{ after(grammarAccess.getStringVariableDeclarationAccess().getStringAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TriggerStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TriggerStatement__Group__0__Impl
	rule__TriggerStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TriggerStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTriggerStatementAccess().getInputKeyword_0()); }
	'Input'
	{ after(grammarAccess.getTriggerStatementAccess().getInputKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TriggerStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TriggerStatement__Group__1__Impl
	rule__TriggerStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TriggerStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTriggerStatementAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getTriggerStatementAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TriggerStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TriggerStatement__Group__2__Impl
	rule__TriggerStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TriggerStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTriggerStatementAccess().getNameAssignment_2()); }
	(rule__TriggerStatement__NameAssignment_2)
	{ after(grammarAccess.getTriggerStatementAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TriggerStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TriggerStatement__Group__3__Impl
	rule__TriggerStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TriggerStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTriggerStatementAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getTriggerStatementAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TriggerStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TriggerStatement__Group__4__Impl
	rule__TriggerStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__TriggerStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTriggerStatementAccess().getHyphenMinusGreaterThanSignKeyword_4()); }
	'->'
	{ after(grammarAccess.getTriggerStatementAccess().getHyphenMinusGreaterThanSignKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TriggerStatement__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TriggerStatement__Group__5__Impl
	rule__TriggerStatement__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__TriggerStatement__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTriggerStatementAccess().getActivityAssignment_5()); }
	(rule__TriggerStatement__ActivityAssignment_5)
	{ after(grammarAccess.getTriggerStatementAccess().getActivityAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TriggerStatement__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TriggerStatement__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TriggerStatement__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTriggerStatementAccess().getStatementAssignment_6()); }
	(rule__TriggerStatement__StatementAssignment_6)
	{ after(grammarAccess.getTriggerStatementAccess().getStatementAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ActivityStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActivityStatement__Group__0__Impl
	rule__ActivityStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ActivityStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActivityStatementAccess().getActivityKeyword_0()); }
	'Activity'
	{ after(grammarAccess.getActivityStatementAccess().getActivityKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActivityStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActivityStatement__Group__1__Impl
	rule__ActivityStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ActivityStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActivityStatementAccess().getNameAssignment_1()); }
	(rule__ActivityStatement__NameAssignment_1)
	{ after(grammarAccess.getActivityStatementAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActivityStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActivityStatement__Group__2__Impl
	rule__ActivityStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ActivityStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActivityStatementAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getActivityStatementAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActivityStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActivityStatement__Group__3__Impl
	rule__ActivityStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ActivityStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActivityStatementAccess().getOnKeyword_3()); }
	'on'
	{ after(grammarAccess.getActivityStatementAccess().getOnKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActivityStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActivityStatement__Group__4__Impl
	rule__ActivityStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ActivityStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActivityStatementAccess().getLast_inputAssignment_4()); }
	(rule__ActivityStatement__Last_inputAssignment_4)
	{ after(grammarAccess.getActivityStatementAccess().getLast_inputAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActivityStatement__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActivityStatement__Group__5__Impl
	rule__ActivityStatement__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ActivityStatement__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActivityStatementAccess().getLeftCurlyBracketKeyword_5()); }
	'{'
	{ after(grammarAccess.getActivityStatementAccess().getLeftCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActivityStatement__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActivityStatement__Group__6__Impl
	rule__ActivityStatement__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__ActivityStatement__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActivityStatementAccess().getStatementsAssignment_6()); }
	(rule__ActivityStatement__StatementsAssignment_6)*
	{ after(grammarAccess.getActivityStatementAccess().getStatementsAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActivityStatement__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActivityStatement__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ActivityStatement__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActivityStatementAccess().getRightCurlyBracketKeyword_7()); }
	'}'
	{ after(grammarAccess.getActivityStatementAccess().getRightCurlyBracketKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__InstructStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InstructStatement__Group__0__Impl
	rule__InstructStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InstructStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInstructStatementAccess().getInstructKeyword_0()); }
	'Instruct'
	{ after(grammarAccess.getInstructStatementAccess().getInstructKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InstructStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InstructStatement__Group__1__Impl
	rule__InstructStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InstructStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInstructStatementAccess().getHyphenMinusGreaterThanSignKeyword_1()); }
	'->'
	{ after(grammarAccess.getInstructStatementAccess().getHyphenMinusGreaterThanSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InstructStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InstructStatement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InstructStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInstructStatementAccess().getInstructionAssignment_2()); }
	(rule__InstructStatement__InstructionAssignment_2)
	{ after(grammarAccess.getInstructStatementAccess().getInstructionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ContactStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ContactStatement__Group__0__Impl
	rule__ContactStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ContactStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContactStatementAccess().getTransferManualKeyword_0()); }
	'transferManual'
	{ after(grammarAccess.getContactStatementAccess().getTransferManualKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContactStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ContactStatement__Group__1__Impl
	rule__ContactStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ContactStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContactStatementAccess().getHyphenMinusGreaterThanSignKeyword_1()); }
	'->'
	{ after(grammarAccess.getContactStatementAccess().getHyphenMinusGreaterThanSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContactStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ContactStatement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ContactStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContactStatementAccess().getPhoneNumberAssignment_2()); }
	(rule__ContactStatement__PhoneNumberAssignment_2)
	{ after(grammarAccess.getContactStatementAccess().getPhoneNumberAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group__0__Impl
	rule__Addition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); }
	ruleMultiplication
	{ after(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getGroup_1()); }
	(rule__Addition__Group_1__0)*
	{ after(grammarAccess.getAdditionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group_1__0__Impl
	rule__Addition__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getAdditionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getAdditionAccess().getAdditionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group_1__1__Impl
	rule__Addition__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getOperatorAssignment_1_1()); }
	(rule__Addition__OperatorAssignment_1_1)
	{ after(grammarAccess.getAdditionAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getRightAssignment_1_2()); }
	(rule__Addition__RightAssignment_1_2)
	{ after(grammarAccess.getAdditionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group__0__Impl
	rule__Multiplication__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getPrimaryParserRuleCall_0()); }
	rulePrimary
	{ after(grammarAccess.getMultiplicationAccess().getPrimaryParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getGroup_1()); }
	(rule__Multiplication__Group_1__0)*
	{ after(grammarAccess.getMultiplicationAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group_1__0__Impl
	rule__Multiplication__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getMultiplicationLeftAction_1_0()); }
	()
	{ after(grammarAccess.getMultiplicationAccess().getMultiplicationLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group_1__1__Impl
	rule__Multiplication__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getOperatorAssignment_1_1()); }
	(rule__Multiplication__OperatorAssignment_1_1)
	{ after(grammarAccess.getMultiplicationAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getRightAssignment_1_2()); }
	(rule__Multiplication__RightAssignment_1_2)
	{ after(grammarAccess.getMultiplicationAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_3__0__Impl
	rule__Primary__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_3_0()); }
	'('
	{ after(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_3__1__Impl
	rule__Primary__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getAdditionParserRuleCall_3_1()); }
	ruleAddition
	{ after(grammarAccess.getPrimaryAccess().getAdditionParserRuleCall_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_3_2()); }
	')'
	{ after(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__REAL__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__REAL__Group__0__Impl
	rule__REAL__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__REAL__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getREALAccess().getINTTerminalRuleCall_0()); }
	(RULE_INT)?
	{ after(grammarAccess.getREALAccess().getINTTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__REAL__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__REAL__Group__1__Impl
	rule__REAL__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__REAL__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getREALAccess().getFullStopKeyword_1()); }
	'.'
	{ after(grammarAccess.getREALAccess().getFullStopKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__REAL__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__REAL__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__REAL__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getREALAccess().getINTTerminalRuleCall_2()); }
	RULE_INT
	{ after(grammarAccess.getREALAccess().getINTTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AutoResponderProgram__StatementsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAutoResponderProgramAccess().getStatementsStatementParserRuleCall_0()); }
		ruleStatement
		{ after(grammarAccess.getAutoResponderProgramAccess().getStatementsStatementParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__HearStatement__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHearStatementAccess().getValueINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getHearStatementAccess().getValueINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__ValueAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableDeclarationAccess().getValueINTTerminalRuleCall_3_0()); }
		RULE_INT
		{ after(grammarAccess.getVariableDeclarationAccess().getValueINTTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringLiteral__ValAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringLiteralAccess().getValSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getStringLiteralAccess().getValSTRINGTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringVariableDeclaration__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringVariableDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getStringVariableDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringVariableDeclaration__StringAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringVariableDeclarationAccess().getStringSTRINGTerminalRuleCall_3_0()); }
		RULE_STRING
		{ after(grammarAccess.getStringVariableDeclarationAccess().getStringSTRINGTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringVarExpression__VarAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringVarExpressionAccess().getVarStringVariableDeclarationCrossReference_0()); }
		(
			{ before(grammarAccess.getStringVarExpressionAccess().getVarStringVariableDeclarationIDTerminalRuleCall_0_1()); }
			RULE_ID
			{ after(grammarAccess.getStringVarExpressionAccess().getVarStringVariableDeclarationIDTerminalRuleCall_0_1()); }
		)
		{ after(grammarAccess.getStringVarExpressionAccess().getVarStringVariableDeclarationCrossReference_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TriggerStatement__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTriggerStatementAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getTriggerStatementAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TriggerStatement__ActivityAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTriggerStatementAccess().getActivityActivityStatementCrossReference_5_0()); }
		(
			{ before(grammarAccess.getTriggerStatementAccess().getActivityActivityStatementIDTerminalRuleCall_5_0_1()); }
			RULE_ID
			{ after(grammarAccess.getTriggerStatementAccess().getActivityActivityStatementIDTerminalRuleCall_5_0_1()); }
		)
		{ after(grammarAccess.getTriggerStatementAccess().getActivityActivityStatementCrossReference_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TriggerStatement__StatementAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTriggerStatementAccess().getStatementActivityStatementParserRuleCall_6_0()); }
		ruleActivityStatement
		{ after(grammarAccess.getTriggerStatementAccess().getStatementActivityStatementParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActivityStatement__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActivityStatementAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getActivityStatementAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActivityStatement__Last_inputAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActivityStatementAccess().getLast_inputStringExpressionParserRuleCall_4_0()); }
		ruleStringExpression
		{ after(grammarAccess.getActivityStatementAccess().getLast_inputStringExpressionParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActivityStatement__StatementsAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActivityStatementAccess().getStatementsStatementParserRuleCall_6_0()); }
		ruleStatement
		{ after(grammarAccess.getActivityStatementAccess().getStatementsStatementParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InstructStatement__InstructionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInstructStatementAccess().getInstructionStringExpressionParserRuleCall_2_0()); }
		ruleStringExpression
		{ after(grammarAccess.getInstructStatementAccess().getInstructionStringExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminationStatement__StateAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminationStatementAccess().getStateActivityStateEnumRuleCall_0()); }
		ruleActivityState
		{ after(grammarAccess.getTerminationStatementAccess().getStateActivityStateEnumRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContactStatement__PhoneNumberAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContactStatementAccess().getPhoneNumberStringExpressionParserRuleCall_2_0()); }
		ruleStringExpression
		{ after(grammarAccess.getContactStatementAccess().getPhoneNumberStringExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditionAccess().getOperatorAlternatives_1_1_0()); }
		(rule__Addition__OperatorAlternatives_1_1_0)
		{ after(grammarAccess.getAdditionAccess().getOperatorAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_2_0()); }
		ruleMultiplication
		{ after(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicationAccess().getOperatorAlternatives_1_1_0()); }
		(rule__Multiplication__OperatorAlternatives_1_1_0)
		{ after(grammarAccess.getMultiplicationAccess().getOperatorAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicationAccess().getRightPrimaryParserRuleCall_1_2_0()); }
		rulePrimary
		{ after(grammarAccess.getMultiplicationAccess().getRightPrimaryParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntLiteral__ValAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntLiteralAccess().getValINTTerminalRuleCall_0()); }
		RULE_INT
		{ after(grammarAccess.getIntLiteralAccess().getValINTTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RealLiteral__ValAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRealLiteralAccess().getValREALParserRuleCall_0()); }
		ruleREAL
		{ after(grammarAccess.getRealLiteralAccess().getValREALParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntVarExpression__VarAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntVarExpressionAccess().getVarVariableDeclarationCrossReference_0()); }
		(
			{ before(grammarAccess.getIntVarExpressionAccess().getVarVariableDeclarationIDTerminalRuleCall_0_1()); }
			RULE_ID
			{ after(grammarAccess.getIntVarExpressionAccess().getVarVariableDeclarationIDTerminalRuleCall_0_1()); }
		)
		{ after(grammarAccess.getIntVarExpressionAccess().getVarVariableDeclarationCrossReference_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
