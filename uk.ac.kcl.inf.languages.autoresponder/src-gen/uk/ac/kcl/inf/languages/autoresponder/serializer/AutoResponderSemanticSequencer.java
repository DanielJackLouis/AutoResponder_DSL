/*
 * generated by Xtext 2.26.0
 */
package uk.ac.kcl.inf.languages.autoresponder.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import uk.ac.kcl.inf.languages.autoresponder.autoResponder.ActivityStatement;
import uk.ac.kcl.inf.languages.autoresponder.autoResponder.Addition;
import uk.ac.kcl.inf.languages.autoresponder.autoResponder.AutoResponderPackage;
import uk.ac.kcl.inf.languages.autoresponder.autoResponder.AutoResponderProgram;
import uk.ac.kcl.inf.languages.autoresponder.autoResponder.ContactStatement;
import uk.ac.kcl.inf.languages.autoresponder.autoResponder.HearStatement;
import uk.ac.kcl.inf.languages.autoresponder.autoResponder.InstructStatement;
import uk.ac.kcl.inf.languages.autoresponder.autoResponder.IntLiteral;
import uk.ac.kcl.inf.languages.autoresponder.autoResponder.IntVarExpression;
import uk.ac.kcl.inf.languages.autoresponder.autoResponder.Multiplication;
import uk.ac.kcl.inf.languages.autoresponder.autoResponder.RealLiteral;
import uk.ac.kcl.inf.languages.autoresponder.autoResponder.StringLiteral;
import uk.ac.kcl.inf.languages.autoresponder.autoResponder.StringVarExpression;
import uk.ac.kcl.inf.languages.autoresponder.autoResponder.StringVariableDeclaration;
import uk.ac.kcl.inf.languages.autoresponder.autoResponder.TerminationStatement;
import uk.ac.kcl.inf.languages.autoresponder.autoResponder.TriggerStatement;
import uk.ac.kcl.inf.languages.autoresponder.autoResponder.VariableDeclaration;
import uk.ac.kcl.inf.languages.autoresponder.services.AutoResponderGrammarAccess;

@SuppressWarnings("all")
public class AutoResponderSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private AutoResponderGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == AutoResponderPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case AutoResponderPackage.ACTIVITY_STATEMENT:
				sequence_ActivityStatement(context, (ActivityStatement) semanticObject); 
				return; 
			case AutoResponderPackage.ADDITION:
				sequence_Addition(context, (Addition) semanticObject); 
				return; 
			case AutoResponderPackage.AUTO_RESPONDER_PROGRAM:
				sequence_AutoResponderProgram(context, (AutoResponderProgram) semanticObject); 
				return; 
			case AutoResponderPackage.CONTACT_STATEMENT:
				sequence_ContactStatement(context, (ContactStatement) semanticObject); 
				return; 
			case AutoResponderPackage.HEAR_STATEMENT:
				sequence_HearStatement(context, (HearStatement) semanticObject); 
				return; 
			case AutoResponderPackage.INSTRUCT_STATEMENT:
				sequence_InstructStatement(context, (InstructStatement) semanticObject); 
				return; 
			case AutoResponderPackage.INT_LITERAL:
				sequence_IntLiteral(context, (IntLiteral) semanticObject); 
				return; 
			case AutoResponderPackage.INT_VAR_EXPRESSION:
				sequence_IntVarExpression(context, (IntVarExpression) semanticObject); 
				return; 
			case AutoResponderPackage.MULTIPLICATION:
				sequence_Multiplication(context, (Multiplication) semanticObject); 
				return; 
			case AutoResponderPackage.REAL_LITERAL:
				sequence_RealLiteral(context, (RealLiteral) semanticObject); 
				return; 
			case AutoResponderPackage.STRING_LITERAL:
				sequence_StringLiteral(context, (StringLiteral) semanticObject); 
				return; 
			case AutoResponderPackage.STRING_VAR_EXPRESSION:
				sequence_StringVarExpression(context, (StringVarExpression) semanticObject); 
				return; 
			case AutoResponderPackage.STRING_VARIABLE_DECLARATION:
				sequence_StringVariableDeclaration(context, (StringVariableDeclaration) semanticObject); 
				return; 
			case AutoResponderPackage.TERMINATION_STATEMENT:
				sequence_TerminationStatement(context, (TerminationStatement) semanticObject); 
				return; 
			case AutoResponderPackage.TRIGGER_STATEMENT:
				sequence_TriggerStatement(context, (TriggerStatement) semanticObject); 
				return; 
			case AutoResponderPackage.VARIABLE_DECLARATION:
				sequence_VariableDeclaration(context, (VariableDeclaration) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Statement returns ActivityStatement
	 *     ActivityStatement returns ActivityStatement
	 *
	 * Constraint:
	 *     (name=ID last_input=StringExpression statements+=Statement*)
	 * </pre>
	 */
	protected void sequence_ActivityStatement(ISerializationContext context, ActivityStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Addition returns Addition
	 *     Addition.Addition_1_0 returns Addition
	 *     Multiplication returns Addition
	 *     Multiplication.Multiplication_1_0 returns Addition
	 *     Primary returns Addition
	 *
	 * Constraint:
	 *     (left=Addition_Addition_1_0 (operator+='+' | operator+='-') right+=Multiplication)
	 * </pre>
	 */
	protected void sequence_Addition(ISerializationContext context, Addition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AutoResponderProgram returns AutoResponderProgram
	 *
	 * Constraint:
	 *     statements+=Statement+
	 * </pre>
	 */
	protected void sequence_AutoResponderProgram(ISerializationContext context, AutoResponderProgram semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Statement returns ContactStatement
	 *     ContactStatement returns ContactStatement
	 *
	 * Constraint:
	 *     phoneNumber=StringExpression
	 * </pre>
	 */
	protected void sequence_ContactStatement(ISerializationContext context, ContactStatement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AutoResponderPackage.Literals.CONTACT_STATEMENT__PHONE_NUMBER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AutoResponderPackage.Literals.CONTACT_STATEMENT__PHONE_NUMBER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getContactStatementAccess().getPhoneNumberStringExpressionParserRuleCall_2_0(), semanticObject.getPhoneNumber());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Statement returns HearStatement
	 *     HearStatement returns HearStatement
	 *
	 * Constraint:
	 *     value=INT
	 * </pre>
	 */
	protected void sequence_HearStatement(ISerializationContext context, HearStatement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AutoResponderPackage.Literals.HEAR_STATEMENT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AutoResponderPackage.Literals.HEAR_STATEMENT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getHearStatementAccess().getValueINTTerminalRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Statement returns InstructStatement
	 *     InstructStatement returns InstructStatement
	 *
	 * Constraint:
	 *     instruction=StringExpression
	 * </pre>
	 */
	protected void sequence_InstructStatement(ISerializationContext context, InstructStatement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AutoResponderPackage.Literals.INSTRUCT_STATEMENT__INSTRUCTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AutoResponderPackage.Literals.INSTRUCT_STATEMENT__INSTRUCTION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInstructStatementAccess().getInstructionStringExpressionParserRuleCall_2_0(), semanticObject.getInstruction());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Addition returns IntLiteral
	 *     Addition.Addition_1_0 returns IntLiteral
	 *     Multiplication returns IntLiteral
	 *     Multiplication.Multiplication_1_0 returns IntLiteral
	 *     Primary returns IntLiteral
	 *     IntLiteral returns IntLiteral
	 *
	 * Constraint:
	 *     val=INT
	 * </pre>
	 */
	protected void sequence_IntLiteral(ISerializationContext context, IntLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AutoResponderPackage.Literals.INT_LITERAL__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AutoResponderPackage.Literals.INT_LITERAL__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIntLiteralAccess().getValINTTerminalRuleCall_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Addition returns IntVarExpression
	 *     Addition.Addition_1_0 returns IntVarExpression
	 *     Multiplication returns IntVarExpression
	 *     Multiplication.Multiplication_1_0 returns IntVarExpression
	 *     Primary returns IntVarExpression
	 *     IntVarExpression returns IntVarExpression
	 *
	 * Constraint:
	 *     var=[VariableDeclaration|ID]
	 * </pre>
	 */
	protected void sequence_IntVarExpression(ISerializationContext context, IntVarExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AutoResponderPackage.Literals.INT_VAR_EXPRESSION__VAR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AutoResponderPackage.Literals.INT_VAR_EXPRESSION__VAR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIntVarExpressionAccess().getVarVariableDeclarationIDTerminalRuleCall_0_1(), semanticObject.eGet(AutoResponderPackage.Literals.INT_VAR_EXPRESSION__VAR, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Addition returns Multiplication
	 *     Addition.Addition_1_0 returns Multiplication
	 *     Multiplication returns Multiplication
	 *     Multiplication.Multiplication_1_0 returns Multiplication
	 *     Primary returns Multiplication
	 *
	 * Constraint:
	 *     (left=Multiplication_Multiplication_1_0 (operator+='*' | operator+='/') right+=Primary)
	 * </pre>
	 */
	protected void sequence_Multiplication(ISerializationContext context, Multiplication semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Addition returns RealLiteral
	 *     Addition.Addition_1_0 returns RealLiteral
	 *     Multiplication returns RealLiteral
	 *     Multiplication.Multiplication_1_0 returns RealLiteral
	 *     Primary returns RealLiteral
	 *     RealLiteral returns RealLiteral
	 *
	 * Constraint:
	 *     val=REAL
	 * </pre>
	 */
	protected void sequence_RealLiteral(ISerializationContext context, RealLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AutoResponderPackage.Literals.REAL_LITERAL__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AutoResponderPackage.Literals.REAL_LITERAL__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRealLiteralAccess().getValREALParserRuleCall_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     StringLiteral returns StringLiteral
	 *     StringExpression returns StringLiteral
	 *
	 * Constraint:
	 *     val=STRING
	 * </pre>
	 */
	protected void sequence_StringLiteral(ISerializationContext context, StringLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AutoResponderPackage.Literals.STRING_LITERAL__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AutoResponderPackage.Literals.STRING_LITERAL__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStringLiteralAccess().getValSTRINGTerminalRuleCall_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     StringVarExpression returns StringVarExpression
	 *     StringExpression returns StringVarExpression
	 *
	 * Constraint:
	 *     var=[StringVariableDeclaration|ID]
	 * </pre>
	 */
	protected void sequence_StringVarExpression(ISerializationContext context, StringVarExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AutoResponderPackage.Literals.STRING_VAR_EXPRESSION__VAR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AutoResponderPackage.Literals.STRING_VAR_EXPRESSION__VAR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStringVarExpressionAccess().getVarStringVariableDeclarationIDTerminalRuleCall_0_1(), semanticObject.eGet(AutoResponderPackage.Literals.STRING_VAR_EXPRESSION__VAR, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Statement returns StringVariableDeclaration
	 *     StringVariableDeclaration returns StringVariableDeclaration
	 *
	 * Constraint:
	 *     (name=ID string=STRING)
	 * </pre>
	 */
	protected void sequence_StringVariableDeclaration(ISerializationContext context, StringVariableDeclaration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AutoResponderPackage.Literals.STRING_VARIABLE_DECLARATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AutoResponderPackage.Literals.STRING_VARIABLE_DECLARATION__NAME));
			if (transientValues.isValueTransient(semanticObject, AutoResponderPackage.Literals.STRING_VARIABLE_DECLARATION__STRING) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AutoResponderPackage.Literals.STRING_VARIABLE_DECLARATION__STRING));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStringVariableDeclarationAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getStringVariableDeclarationAccess().getStringSTRINGTerminalRuleCall_3_0(), semanticObject.getString());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Statement returns TerminationStatement
	 *     TerminationStatement returns TerminationStatement
	 *
	 * Constraint:
	 *     state=ActivityState
	 * </pre>
	 */
	protected void sequence_TerminationStatement(ISerializationContext context, TerminationStatement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AutoResponderPackage.Literals.TERMINATION_STATEMENT__STATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AutoResponderPackage.Literals.TERMINATION_STATEMENT__STATE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTerminationStatementAccess().getStateActivityStateEnumRuleCall_0(), semanticObject.getState());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Statement returns TriggerStatement
	 *     TriggerStatement returns TriggerStatement
	 *
	 * Constraint:
	 *     (name=ID activity=[ActivityStatement|ID] statement+=ActivityStatement)
	 * </pre>
	 */
	protected void sequence_TriggerStatement(ISerializationContext context, TriggerStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Statement returns VariableDeclaration
	 *     VariableDeclaration returns VariableDeclaration
	 *
	 * Constraint:
	 *     (name=ID value=INT)
	 * </pre>
	 */
	protected void sequence_VariableDeclaration(ISerializationContext context, VariableDeclaration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AutoResponderPackage.Literals.VARIABLE_DECLARATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AutoResponderPackage.Literals.VARIABLE_DECLARATION__NAME));
			if (transientValues.isValueTransient(semanticObject, AutoResponderPackage.Literals.VARIABLE_DECLARATION__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AutoResponderPackage.Literals.VARIABLE_DECLARATION__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getVariableDeclarationAccess().getValueINTTerminalRuleCall_3_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
}
