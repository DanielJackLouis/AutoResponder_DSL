/*
 * generated by Xtext 2.26.0
 */
package uk.ac.kcl.inf.languages.autoresponder.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import uk.ac.kcl.inf.languages.autoresponder.ide.contentassist.antlr.internal.InternalAutoResponderParser;
import uk.ac.kcl.inf.languages.autoresponder.services.AutoResponderGrammarAccess;

public class AutoResponderParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(AutoResponderGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, AutoResponderGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
			builder.put(grammarAccess.getStringExpressionAccess().getAlternatives(), "rule__StringExpression__Alternatives");
			builder.put(grammarAccess.getAdditionAccess().getOperatorAlternatives_1_1_0(), "rule__Addition__OperatorAlternatives_1_1_0");
			builder.put(grammarAccess.getMultiplicationAccess().getOperatorAlternatives_1_1_0(), "rule__Multiplication__OperatorAlternatives_1_1_0");
			builder.put(grammarAccess.getPrimaryAccess().getAlternatives(), "rule__Primary__Alternatives");
			builder.put(grammarAccess.getActivityStateAccess().getAlternatives(), "rule__ActivityState__Alternatives");
			builder.put(grammarAccess.getHearStatementAccess().getGroup(), "rule__HearStatement__Group__0");
			builder.put(grammarAccess.getVariableDeclarationAccess().getGroup(), "rule__VariableDeclaration__Group__0");
			builder.put(grammarAccess.getStringVariableDeclarationAccess().getGroup(), "rule__StringVariableDeclaration__Group__0");
			builder.put(grammarAccess.getTriggerStatementAccess().getGroup(), "rule__TriggerStatement__Group__0");
			builder.put(grammarAccess.getActivityStatementAccess().getGroup(), "rule__ActivityStatement__Group__0");
			builder.put(grammarAccess.getInstructStatementAccess().getGroup(), "rule__InstructStatement__Group__0");
			builder.put(grammarAccess.getContactStatementAccess().getGroup(), "rule__ContactStatement__Group__0");
			builder.put(grammarAccess.getAdditionAccess().getGroup(), "rule__Addition__Group__0");
			builder.put(grammarAccess.getAdditionAccess().getGroup_1(), "rule__Addition__Group_1__0");
			builder.put(grammarAccess.getMultiplicationAccess().getGroup(), "rule__Multiplication__Group__0");
			builder.put(grammarAccess.getMultiplicationAccess().getGroup_1(), "rule__Multiplication__Group_1__0");
			builder.put(grammarAccess.getPrimaryAccess().getGroup_3(), "rule__Primary__Group_3__0");
			builder.put(grammarAccess.getREALAccess().getGroup(), "rule__REAL__Group__0");
			builder.put(grammarAccess.getAutoResponderProgramAccess().getStatementsAssignment(), "rule__AutoResponderProgram__StatementsAssignment");
			builder.put(grammarAccess.getHearStatementAccess().getValueAssignment_1(), "rule__HearStatement__ValueAssignment_1");
			builder.put(grammarAccess.getVariableDeclarationAccess().getNameAssignment_1(), "rule__VariableDeclaration__NameAssignment_1");
			builder.put(grammarAccess.getVariableDeclarationAccess().getValueAssignment_3(), "rule__VariableDeclaration__ValueAssignment_3");
			builder.put(grammarAccess.getStringLiteralAccess().getValAssignment(), "rule__StringLiteral__ValAssignment");
			builder.put(grammarAccess.getStringVariableDeclarationAccess().getNameAssignment_1(), "rule__StringVariableDeclaration__NameAssignment_1");
			builder.put(grammarAccess.getStringVariableDeclarationAccess().getStringAssignment_3(), "rule__StringVariableDeclaration__StringAssignment_3");
			builder.put(grammarAccess.getStringVarExpressionAccess().getVarAssignment(), "rule__StringVarExpression__VarAssignment");
			builder.put(grammarAccess.getTriggerStatementAccess().getNameAssignment_2(), "rule__TriggerStatement__NameAssignment_2");
			builder.put(grammarAccess.getTriggerStatementAccess().getActivityAssignment_5(), "rule__TriggerStatement__ActivityAssignment_5");
			builder.put(grammarAccess.getTriggerStatementAccess().getStatementAssignment_6(), "rule__TriggerStatement__StatementAssignment_6");
			builder.put(grammarAccess.getActivityStatementAccess().getNameAssignment_1(), "rule__ActivityStatement__NameAssignment_1");
			builder.put(grammarAccess.getActivityStatementAccess().getLast_inputAssignment_4(), "rule__ActivityStatement__Last_inputAssignment_4");
			builder.put(grammarAccess.getActivityStatementAccess().getStatementsAssignment_6(), "rule__ActivityStatement__StatementsAssignment_6");
			builder.put(grammarAccess.getInstructStatementAccess().getInstructionAssignment_2(), "rule__InstructStatement__InstructionAssignment_2");
			builder.put(grammarAccess.getTerminationStatementAccess().getStateAssignment(), "rule__TerminationStatement__StateAssignment");
			builder.put(grammarAccess.getContactStatementAccess().getPhoneNumberAssignment_2(), "rule__ContactStatement__PhoneNumberAssignment_2");
			builder.put(grammarAccess.getAdditionAccess().getOperatorAssignment_1_1(), "rule__Addition__OperatorAssignment_1_1");
			builder.put(grammarAccess.getAdditionAccess().getRightAssignment_1_2(), "rule__Addition__RightAssignment_1_2");
			builder.put(grammarAccess.getMultiplicationAccess().getOperatorAssignment_1_1(), "rule__Multiplication__OperatorAssignment_1_1");
			builder.put(grammarAccess.getMultiplicationAccess().getRightAssignment_1_2(), "rule__Multiplication__RightAssignment_1_2");
			builder.put(grammarAccess.getIntLiteralAccess().getValAssignment(), "rule__IntLiteral__ValAssignment");
			builder.put(grammarAccess.getRealLiteralAccess().getValAssignment(), "rule__RealLiteral__ValAssignment");
			builder.put(grammarAccess.getIntVarExpressionAccess().getVarAssignment(), "rule__IntVarExpression__VarAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private AutoResponderGrammarAccess grammarAccess;

	@Override
	protected InternalAutoResponderParser createParser() {
		InternalAutoResponderParser result = new InternalAutoResponderParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public AutoResponderGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(AutoResponderGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
